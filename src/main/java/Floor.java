
import java.util.HashMap;
import java.util.ArrayList;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * This class implements floors of buildings, with all of their relevant data and methods.
 * 
 * Each floor has a floor ID, a name, and a hash map of points of interest (POIs) together with
 * their categories on that floor. This class handles all of the interactions with floors. To see how POIs work, check out
 * src/POI.java.
 * 
 * @author bluu8, jender
 */

public class Floor {
    // Floor ID, name and POIs.
    private int id;
    private String name;
    private HashMap<String, ArrayList> poiData;
    
    /**
     * The constructor for a Floor object.
     * 
     * The constructor takes a JSON object containing the data for the floor (see above), and it considers
     * whether each POI in poiData is a "built-in" POI (hardcoded by the developers), or a "custom" POI
     * (generated by the user themselves). In any case, we pull the JSON data for the floor and generate
     * its HashMap of POIs.
     * 
     * @param fl - The JSON data for the floor.
     * @param builtin - Sets the status of POIs to built in or custom.
     */
    public Floor(JSONObject fl, boolean builtin) {
        poiData = new HashMap();
        
        // we will use an id system, in case the floor name has changed for whatever reason
        
        id = fl.getInt("id");
        if (fl.has("name")) name = fl.getString("name");
        
        // loop through every POI entry in the json file and create the POI object for it
        JSONArray arr = fl.getJSONArray("poi");
        for (int i = 0; i != arr.length(); i++) {
            try {
                // Grab all the data and place it into a new POI object.
                JSONObject poiEntry = arr.getJSONObject(i);
                String name = poiEntry.getString("name");
                String category = poiEntry.getString("category");
                String icon = poiEntry.getString("icon");
                String description = poiEntry.getString("description");
                int x = poiEntry.getInt("x");
                int y = poiEntry.getInt("y");
                
                POI newPOI = new POI(name, category, icon, description, x, y);
                newPOI.setBuiltIn(builtin);
                                
                // create category in the hashmap if non-existent
                if (!poiData.containsKey(category)) poiData.put(category, new ArrayList());

                poiData.get(category).add(newPOI);
            }
            catch (JSONException e) {
                // skip POI if error
                System.out.println("Failed to read a POI entry! " + e);
                continue;
            }
        }
    }
    
    /**
     * This method updates the hash map of POIs, if necessary.
     * 
     * If a POI is deleted and the category it belongs to no longer exists, we need to refresh the
     * hash map to ensure we don't have empty categories.
     * 
     */
    public void updateMap() {
        // in case we need to rename a category (because there was only one entry left with that category name)
        HashMap<String, ArrayList> newList = new HashMap();
        
        // Iterate over the POI keys and re-generate the hash map.
        for (String old : poiData.keySet()) {
            ArrayList<POI> data = poiData.get(old);
            for (int i = 0; i != data.size(); i++) {
                String catname = data.get(i).getCategory();
                if (!newList.containsKey(catname)) newList.put(catname, new ArrayList());
                newList.get(catname).add(data.get(i));
            }
        }
        
        poiData = newList;
    }
    
    /**
     * This method returns the ID of a floor.
     * 
     * @return The ID of the floor.
     */
    public int getID() {
        return id;
    }
    
    /**
     * This method sets a new ID for the floor.
     * 
     * @param id - The new ID for the floor.
     */
    public void setID(int id) {
        this.id = id;
    }
    
    /**
     * This method returns the name of the floor.
     * 
     * @return The name of this floor.
     */
    public String getName() {
        return name;
    }
    
    /**
     * This method sets the name for the floor to a new name.
     * 
     * @param newName - The new name for the floor.
     */
    public void setName(String newName) {
        name = newName;
    }
    
    /**
     * This method adds a POI to the hash map.
     * 
     * If the POI comes from a new category, we also generate that category.
     * 
     * @param poi - The POI object to be added.
     */
    public void addPOI(POI poi) {
        if (!poiData.containsKey(poi.getCategory())) poiData.put(poi.getCategory(), new ArrayList());
        poiData.get(poi.getCategory()).add(poi);
    }
    
    /**
     * This method removes a POI from the hash map, if it exists.
     * 
     * @param poi - The POI object to be removed.
     */
    public void removePOI(POI poi) {
        //Search for the POI
        ArrayList<POI> pois = poiData.get(poi.getCategory());
        
        // If the POI was favourited by the user, we use this case.
        if (poi.isFavourited()) {
            for (int a = 0; a != pois.size(); a++) {
                if (pois.get(a).isEquivalent(poi)) {
                    pois.remove(a);
                    break;
                }
            }
        }

        // otherwise remove it normally
        if (pois.contains(poi)) pois.remove(poi);

        updateMap(); //Refresh the map (see above)
    }
    
    /**
     * This method returns the hash map of all of the (Category, POI) vectors.
     * 
     * @return All of the POI data together with their categories.
     */
    public HashMap getPOIs() {
        return poiData;
    }
    
    /**
     * This method puts all of the above data into JSON format, so we can export it to our files.
     * 
     * We compile all the data into JSON format and return it as a JSONObject.
     * 
     * @return A JSON object of all of the data for this floor.
     */
    public JSONObject exportJSON() {
        JSONObject data = new JSONObject();
        data.put("id", id);
        if (data != null) data.put("name", name);
        
        //Generate a JSONArray corresponding to the POI data.
        JSONArray array = new JSONArray();
        
        //Populate the array
        for (String cat : poiData.keySet()) {
            ArrayList<POI> arrdata = poiData.get(cat);
            for (int i = 0; i != arrdata.size(); i++) {
                array.put(arrdata.get(i).exportJSON());
            }
        }
        
        data.put("poi", array);
        
        return data;
    }
}
